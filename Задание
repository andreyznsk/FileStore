Ответы:
1. Как организовать клиент-серверное взаимодействие?
Соединение через сокет по адрес/порту на сервере будет висеть слушатель буфера в бесконечном цикле.
Если пытается подключиться новый пользователь, то
На каждого нового клиента будет открываться новый поток который будет 1. проводить аутентификацию, если аутентификация прошла успешно,
то взаимодействовать с каждым клиентом.
Так же будет отдельный поток который будет посылать общие команды для всех пользователей.
2. Как и в каком виде передавать файлы?
Как то копировать каналы через буфер, нашел вот такое
    while (in.read(buffer) >= 0 || buffer.position() > 0)
    {
      buffer.flip();
      out.write(buffer);
      buffer.compact();
    }
3. Как пересылать большие файлы?
Может быть сначала передать размер файла, а потом выполнять передачу, пока размеры не сравняются.
4. Как пересылать служебные команды?
У клиента и сервера будет общий класс команды, участники будут обмениваться объектами данного класса, который будет содержать ссылку
на класс типа команды в котором будет находиться техническая информация и поле типа дата с данными.
например:  public static Command authCommand(String login, String password){
                  Command command = new Command();
                  command.type = CommandType.AUTH;
                  command.data = new AuthCommandData(login, password);
                  return command;

              }
5. Что хранить в базе данных?
В базе данных будут храниться уникальный логин и хэш код пароля, так же наверно будет храниться структура каталогов и начальный каталог каждого пользователя.
6. Как передавать структуру каталогов/файлов?
Будет отдельный класс который будет получать данные из БД и посылать путь клиенту
7. Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?
Использовать буду nio нужно ее изучить, + я так понимаю есть преимущества по неблокирующим методам, но пока сказать сложно.

